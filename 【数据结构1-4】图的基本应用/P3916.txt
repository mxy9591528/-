#include <iostream>
#include <vector>
using namespace std;

#define MAXL 100010

int N, M, A[MAXL];
vector<int> G[MAXL]; //vector存图 

void dfs(int x, int d) {
	if(A[x]) return; //访问过 
	A[x] = d;
	for(int i=0; i<G[x].size(); i++)
		dfs(G[x][i], d);
}

int main() {
	int u, v;
	cin>>N>>M;
	for(int i=1; i<=M; i++) {
		cin>>u>>v;
		G[v].push_back(u); //反向建边 
	}
	for(int i=N; i; i--) dfs(i, i); 
	for(int i=1; i<=N; i++)cout<<A[i]<<" ";
	cout<<endl;
	return 0;
}

#include<iostream>
#include<queue>
using namespace std;
struct data
{
    int v;int next;
}edge[100010];
int alist[100010];
int cnt;
void add(int u,int v)
{
    edge[++cnt].v=v;
    edge[cnt].next=alist[u];
    alist[u]=cnt;
    return;
}
int n;int m;
int res[100010];//答案数组
queue <int> q;
int now;
int main()
{
    cin>>n>>m;
    for(int i=0;i<m;i++)
    {
        int u;int v;
        cin>>u>>v;
        add(v,u);//反向建图
    }
    for(int i=n;i>=1;i--)
    {
        if(res[i])continue;
        q.push(i);
        while(!q.empty())
        {
            now=q.front();q.pop();
            res[now]=i;
            int next=alist[now];
            while(next)
            {
                int v=edge[next].v;
                if(res[v]==0)
                {
                    q.push(v);
                }
                next=edge[next].next;
            }
        }
    }
    for(int i=1;i<=n;i++)
    {
        cout<<res[i]<<" ";
    }
    return 0;
}


#include <iostream>
#include<cstring>
#define maxn 100010
using namespace std;
int n, m;

int cnt;
int head[maxn];
struct Edge {int from, to, nxt;} e[maxn];

void add_edge(int u, int v) {
	cnt++;
	e[cnt].to = v;
	e[cnt].from = u;
	e[cnt].nxt = head[u];
	head[u] = cnt;
}

int r;//栈的右端点 
int s[maxn];//数组来模拟栈 
int num;//个数
int Time; 
bool vis[maxn];
int belong[maxn];//一个点属于哪个强连通分量 
int dfn[maxn], low[maxn];
int rep[maxn];//存储缩完点后每个点所代表的所有点中编号最大的 

void Tarjan(int u) {
	dfn[u] = low[u] = ++Time;
	vis[u] = 1;
	s[++r] = u;
	int R = r;
	for (int i = head[u]; i; i = e[i].nxt) {
		int v = e[i].to;
		if (!dfn[v]) {
			Tarjan(v);
			low[u] = min(low[u], low[v]);
		}
		else if (vis[v]) low[u] = min(low[u], dfn[v]);
	}
	if (dfn[u] == low[u]) {
		num++;
		for (int i = R; i <= r; i++) {
			vis[s[i]] = 0;
			belong[s[i]] = num;
			rep[num] = max(rep[num], s[i]);
			//记录强连通分量中编号最大的点（的编号） 
		}
		r = R - 1;
	}
}

//重新建图 
void rebuild() {
	cnt = 0;
	memset(head, 0, sizeof head);
	for (int i = 1; i <= m; i++) {
		int x = e[i].from, y = e[i].to;
		if (belong[x] == belong[y]) continue;
		add_edge(belong[x], belong[y]);
	}
}

int ans[maxn];

void dfs(int u) {
	if (ans[u]) return;
	ans[u] = rep[u];
	//必定能到这个强连通分量中的点 
	for (int i = head[u]; i; i = e[i].nxt) {
		int v = e[i].to;
		dfs(v);
		ans[u] = max(ans[u], ans[v]);
		//和上一句的位置不能颠倒 
	}
}

int main() {
    cin>>n>>m;
	for (int i = 1; i <= m; i++) {
		int x,y;
		cin>>x>>y;
		add_edge(x, y);
	}
	for (int i = 1; i <= n; i++) if (!dfn[i]) Tarjan(i);
	rebuild();
	for (int i = 1; i <= num; i++) if (!ans[i]) dfs(i);
	for (int i = 1; i <= n; i++) cout << ans[belong[i]] << ' ';
	//一个点的答案都直接输出对应的强连通分量能到的编号最大的点 
	return 0;
}